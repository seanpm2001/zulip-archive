[
    {
        "content": "<p>From: <a href=\"mailto:hannobecker@posteo.de\">hannobecker@posteo.de</a><br>\nHi all,</p>\n<p>This is about enabling/disabling adhoc overloading.</p>\n<p>Expectation: A pair of <code>adhoc_overloading const term</code> and <br>\n<code>no_adhoc_overloading const term</code> in the same context should work and <br>\nlead to the overloading of <code>const</code> by <code>term</code> be disabled subsequently.</p>\n<p>Observed behavior: In the context of locales and polymorphic <code>term</code>, <br>\nunrelated definitions in between <code>adhoc_overloading</code> and <br>\n<code>no_adhoc_overloading</code> can lead to <code>no_adhoc_overloading</code> failing.</p>\n<p>Example:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">Scratch</span>\n<span class=\"w\">    </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span><span class=\"w\"> </span><span class=\"s\">\"HOL-Library.Adhoc_Overloading\"</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">consts</span><span class=\"w\"> </span><span class=\"n\">abstract</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹'x›</span>\n\n<span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">   </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹'s›</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">concrete</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹'v ⇒ 'v›</span>\n<span class=\"w\">   </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">‹concrete ≡ id›</span>\n\n<span class=\"k\">adhoc_overloading</span><span class=\"w\"> </span><span class=\"n\">abstract</span><span class=\"w\"> </span><span class=\"n\">concrete</span>\n<span class=\"k\">no_adhoc_overloading</span><span class=\"w\"> </span><span class=\"n\">abstract</span><span class=\"w\"> </span><span class=\"n\">concrete</span><span class=\"w\"> </span><span class=\"c\">(* OK *)</span>\n\n<span class=\"k\">adhoc_overloading</span><span class=\"w\"> </span><span class=\"n\">abstract</span><span class=\"w\"> </span><span class=\"n\">concrete</span>\n\n<span class=\"c\">(* debug only *)</span>\n<span class=\"k\">ML</span><span class=\"s\">‹\"concrete\" |&gt; Syntax.parse_term @{context}</span>\n<span class=\"s\">               |&gt; singleton (Variable.polymorphic @{context})</span>\n<span class=\"s\">               |&gt; Term.fastype_of</span>\n<span class=\"s\">               |&gt; Syntax.pretty_typ @{context}</span>\n<span class=\"s\">               |&gt; Pretty.writeln›</span><span class=\"w\"> </span><span class=\"c\">(* ?&lt;position&gt; *)</span>\n\n<span class=\"c\">(* Seemingly unrelated ... *)</span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹'s ⇒ 'v ⇒ 'v›</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">   </span><span class=\"s\">‹test _ x ≡ x›</span>\n\n<span class=\"c\">(* debug only *)</span>\n<span class=\"k\">ML</span><span class=\"s\">‹\"concrete\" |&gt; Syntax.parse_term @{context}</span>\n<span class=\"s\">               |&gt; singleton (Variable.polymorphic @{context})</span>\n<span class=\"s\">               |&gt; Term.fastype_of</span>\n<span class=\"s\">               |&gt; Syntax.pretty_typ @{context}</span>\n<span class=\"s\">               |&gt; Pretty.writeln›</span><span class=\"w\"> </span><span class=\"c\">(* ?&lt;position&gt;1 *)</span>\n\n<span class=\"c\">(* Mismatch due to strict type equality check</span>\n<span class=\"c\">    cf. L60 in Adhoc_Overloading.thy</span>\n\n<span class=\"c\">    fun variants_eq ((v1, T1), (v2, T2)) =</span>\n<span class=\"c\">       Term.aconv_untyped (v1, v2) andalso T1 = T2;</span>\n<span class=\"c\">*)</span>\n<span class=\"k\">no_adhoc_overloading</span><span class=\"w\"> </span><span class=\"n\">abstract</span><span class=\"w\"> </span><span class=\"n\">concrete</span>\n<span class=\"c\">(* FAIL: Not a variant of \"Scratch.abstract\" *)</span>\n\n<span class=\"k\">end</span>\n\n<span class=\"k\">end</span>\n\n<span class=\"n\">As</span><span class=\"w\"> </span><span class=\"n\">indicated</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">comment</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">issue</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"> </span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"n\">that</span>\n<span class=\"sx\">`no_adhoc_overloading const term`</span><span class=\"w\"> </span><span class=\"n\">expects</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"sx\">`term`</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">be</span>\n<span class=\"o\">_</span><span class=\"n\">equal_</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"sx\">`term`</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"sx\">`adhoc_overloading const</span>\n<span class=\"sx\">term`</span><span class=\"ow\">.</span><span class=\"w\"> </span><span class=\"n\">However</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"kp\">if</span><span class=\"w\"> </span><span class=\"sx\">`term`</span><span class=\"w\"> </span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"n\">polymorphic</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">polymorphic</span><span class=\"w\"> </span><span class=\"n\">parsing</span><span class=\"w\"> </span><span class=\"n\">of</span>\n<span class=\"sx\">`term`</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Syntax.parse_term</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Variable.polymorphic</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">cf.</span><span class=\"w\"> </span><span class=\"n\">source</span><span class=\"w\"> </span><span class=\"n\">of</span>\n<span class=\"k\">adhoc_overloading</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">introduces</span><span class=\"w\"> </span><span class=\"n\">schematic</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"n\">variables</span><span class=\"w\"> </span><span class=\"n\">whose</span><span class=\"w\"> </span><span class=\"n\">names</span><span class=\"w\"> </span><span class=\"n\">are</span>\n<span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">stable.</span><span class=\"w\"> </span><span class=\"n\">This</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">witnessed</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">ML</span><span class=\"w\"> </span><span class=\"n\">snippets</span><span class=\"w\"> </span><span class=\"n\">inserted</span><span class=\"w\"> </span><span class=\"n\">above.</span>\n\n<span class=\"n\">It</span><span class=\"w\"> </span><span class=\"n\">seems</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"o\">-</span><span class=\"n\">comparison</span><span class=\"w\"> </span><span class=\"n\">needs</span><span class=\"w\"> </span><span class=\"n\">weakening</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">am</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">sure</span>\n<span class=\"n\">what</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">right</span><span class=\"w\"> </span><span class=\"n\">comparator</span><span class=\"w\"> </span><span class=\"n\">would</span><span class=\"w\"> </span><span class=\"n\">be.</span>\n\n<span class=\"n\">If</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">could</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">addressed</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">Isabelle2024</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">I'd</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">grateful.</span><span class=\"w\"> </span><span class=\"n\">In</span><span class=\"w\"> </span><span class=\"n\">the</span>\n<span class=\"n\">meantime</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"kp\">if</span><span class=\"w\"> </span><span class=\"n\">anyone</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">workaround</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">hand</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">would</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">much</span>\n<span class=\"n\">appreciated</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">well</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">encountered</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">above</span><span class=\"w\"> </span><span class=\"n\">issue</span><span class=\"w\"> </span><span class=\"n\">multiple</span>\n<span class=\"n\">times.</span>\n\n<span class=\"n\">Thank</span><span class=\"w\"> </span><span class=\"n\">you</span><span class=\"o\">,</span>\n<span class=\"n\">Hanno</span>\n</code></pre></div>",
        "id": 420123514,
        "sender_full_name": "Email Gateway",
        "timestamp": 1707249169
    },
    {
        "content": "<p>From: <a href=\"mailto:hannobecker@posteo.de\">hannobecker@posteo.de</a><br>\nHi,</p>\n<p>Quick correction: It's <code>read_term</code>, not <code>parse_term</code>, that is used by <br>\nthe adhoc overloading code. The problem is still the same, though.</p>\n<p>Updated example below.</p>\n<p>Best,<br>\nHanno</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">Scratch</span>\n<span class=\"w\">    </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span><span class=\"w\"> </span><span class=\"s\">\"HOL-Library.Adhoc_Overloading\"</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">declare</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"n\">show_variants</span><span class=\"o\">]]</span>\n<span class=\"k\">consts</span><span class=\"w\"> </span><span class=\"n\">abstract</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹'x›</span>\n\n<span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">   </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹'s›</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">concrete</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹'v ⇒ 'v›</span>\n<span class=\"w\">   </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">‹concrete ≡ id›</span>\n\n<span class=\"k\">adhoc_overloading</span><span class=\"w\"> </span><span class=\"n\">abstract</span><span class=\"w\"> </span><span class=\"n\">concrete</span>\n<span class=\"k\">no_adhoc_overloading</span><span class=\"w\"> </span><span class=\"n\">abstract</span><span class=\"w\"> </span><span class=\"n\">concrete</span><span class=\"w\"> </span><span class=\"c\">(* OK *)</span>\n\n<span class=\"k\">adhoc_overloading</span><span class=\"w\"> </span><span class=\"n\">abstract</span><span class=\"w\"> </span><span class=\"n\">concrete</span>\n<span class=\"c\">(* debug only *)</span>\n<span class=\"k\">ML</span><span class=\"s\">‹\"concrete\" |&gt; Syntax.read_term @{context}</span>\n<span class=\"s\">               |&gt; singleton (Variable.polymorphic @{context})</span>\n<span class=\"s\">               |&gt; Term.fastype_of</span>\n<span class=\"s\">               |&gt; Syntax.pretty_typ @{context}</span>\n<span class=\"s\">               |&gt; Pretty.writeln›</span><span class=\"w\"> </span><span class=\"c\">(* ?'a ⇒ ?'a  *)</span>\n\n<span class=\"c\">(* Seemingly unrelated ... *)</span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹'s ⇒ 'v ⇒ 'v›</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">   </span><span class=\"s\">‹test _ x ≡ x›</span>\n\n<span class=\"c\">(* debug only *)</span>\n<span class=\"k\">ML</span><span class=\"s\">‹\"concrete\" |&gt; Syntax.read_term @{context}</span>\n<span class=\"s\">               |&gt; singleton (Variable.polymorphic @{context})</span>\n<span class=\"s\">               |&gt; Term.fastype_of</span>\n<span class=\"s\">               |&gt; Syntax.pretty_typ @{context}</span>\n<span class=\"s\">               |&gt; Pretty.writeln›</span><span class=\"w\"> </span><span class=\"c\">(* ?'a1 ⇒ ?'a1 *)</span>\n\n<span class=\"c\">(* Mismatch due to strict type equality check</span>\n<span class=\"c\">    cf. L60 in Adhoc_Overloading.thy</span>\n\n<span class=\"c\">    fun variants_eq ((v1, T1), (v2, T2)) =</span>\n<span class=\"c\">       Term.aconv_untyped (v1, v2) andalso T1 = T2;</span>\n<span class=\"c\">*)</span>\n<span class=\"k\">no_adhoc_overloading</span><span class=\"w\"> </span><span class=\"n\">abstract</span><span class=\"w\"> </span><span class=\"n\">concrete</span>\n<span class=\"c\">(* FAIL: Not a variant of \"Scratch.abstract\" *)</span>\n\n<span class=\"k\">end</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 420204117,
        "sender_full_name": "Email Gateway",
        "timestamp": 1707295875
    }
]