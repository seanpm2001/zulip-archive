[
    {
        "content": "<p>From: <a href=\"mailto:hannobecker@posteo.de\">hannobecker@posteo.de</a><br>\nHi,</p>\n<p>I observe the following unexpected behaviour of the simplifier (both in <br>\nIsabelle2023 and in Isabelle2024-RC2):</p>\n<p>The following goal solves <code>by simp</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">schematic_goal</span>\n<span class=\"w\">   </span><span class=\"s\">‹(⋂(r :: 'a). let bar = ?foo r in bar) = ⋂ (range ?foo)›</span>\n<span class=\"w\">   </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n</code></pre></div>\n<p>However, when specializing <code>'a</code> to <code>unit</code>, it does no longer. The simp <br>\ntrace indicates that the issue may be related to the <code>unit</code> parameter <br>\nbeing elided from the schematic variable.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">schematic_goal</span>\n<span class=\"w\">   </span><span class=\"s\">‹(⋂(r :: unit). let bar = ?foo r in bar) = ⋂ (range ?foo)›</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"c\">(* No luck *)</span>\n<span class=\"w\">   </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"n\">simp_trace</span><span class=\"o\">]]</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">   </span><span class=\"c\">(* [1]Proved wrong theorem (bad subgoaler?)</span>\n<span class=\"c\">        range (λr. let bar = ?g7 in bar) ≡ range (λa. ?g7)</span>\n<span class=\"c\">      Should have proved:</span>\n<span class=\"c\">        range (λr. let bar = ?foo r in bar)</span>\n<span class=\"c\">      [1]Congruence proof failed.  Should not have proved</span>\n<span class=\"c\">        range (λr. let bar = ?g7 in bar) ≡ range (λa. ?g7)</span>\n<span class=\"c\">      [1]Applying congruence rule:</span>\n<span class=\"c\">        UNIV ≡ ?N1 ⟹ (⋀x. x ∈ ?N1 =simp=&gt; ?foo x ≡ ?g1 x) ⟹ range ?foo ≡</span>\n<span class=\"c\">?g1 ` ?N1 *)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">cong</span><span class=\"w\"> </span><span class=\"n\">del</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">image_cong</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"k\">done</span>\n</code></pre></div>\n<p>The above is a minimal example derived from a real-world instance <br>\narising in our large-scale application of Isabelle. As indicated, the <br>\nproblem disappears when removing the <code>image_cong</code> congruence rule, but <br>\nthat may cause us surprises elsewhere, so I would prefer an alternative <br>\nsolution if possible.</p>\n<p>As always, thanks for help,<br>\nHanno</p>",
        "id": 436756178,
        "sender_full_name": "Email Gateway",
        "timestamp": 1714675745
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nHanno,</p>\n<p>Thanks for the notification. I will look into this, but not before the release.</p>\n<p>Tobias</p>\n<p><a href=\"/user_uploads/14278/5bX_0ySRNqwayKKmjyjA6gMu/smime.p7s\">smime.p7s</a></p>",
        "id": 437211342,
        "sender_full_name": "Email Gateway",
        "timestamp": 1714981775
    }
]